package cb.psi

import cb.CbLanguage
import com.intellij.psi.tree.IElementType

class CbToken(val name: String) : IElementType(name, CbLanguage) {
  companion object {
    @JvmField val WHITESPACE = CbToken("whitespace")
    @JvmField val NEWLINE = CbToken("newline")
    @JvmField val COMMENT = CbToken("comment")
    @JvmField val NUMBER = CbToken("number")

    @JvmField val GREATER_GREATER_EQ = CbToken("GREATER_GREATER_EQ")
    @JvmField val LESS_LESS_EQ = CbToken("LESS_LESS_EQ")
    @JvmField val AMP_EQ = CbToken("AMP_EQ")
    @JvmField val CARET_EQ = CbToken("CARET_EQ")
    @JvmField val COLON_EQ = CbToken("COLON_EQ")
    @JvmField val COLON_EXCL = CbToken("COLON_EXCL")
    @JvmField val EQ_EQ = CbToken("EQ_EQ")
    @JvmField val EQ_GREATER = CbToken("EQ_GREATER")
    @JvmField val EXCL_EQ = CbToken("EXCL_EQ")
    @JvmField val GREATER_EQ = CbToken("GREATER_EQ")
    @JvmField val GREATER_GREATER = CbToken("GREATER_GREATER")
    @JvmField val LESS_EQ = CbToken("LESS_EQ")
    @JvmField val LESS_GREATER = CbToken("LESS_GREATER")
    @JvmField val LESS_LESS = CbToken("LESS_LESS")
    @JvmField val LESS_MINUS = CbToken("LESS_MINUS")
    @JvmField val MINUS_EQ = CbToken("MINUS_EQ")
    @JvmField val MINUS_GREATER = CbToken("MINUS_GREATER")
    @JvmField val MINUS_MINUS = CbToken("MINUS_MINUS")
    @JvmField val PERCENT_EQ = CbToken("PERCENT_EQ")
    @JvmField val PIPE_EQ = CbToken("PIPE_EQ")
    @JvmField val PLUS_EQ = CbToken("PLUS_EQ")
    @JvmField val PLUS_PLUS = CbToken("PLUS_PLUS")
    @JvmField val SLASH_EQ = CbToken("SLASH_EQ")
    @JvmField val STAR_EQ = CbToken("STAR_EQ")
    @JvmField val TILDE_EQ = CbToken("TILDE_EQ")
    @JvmField val AMP = CbToken("AMP")
    @JvmField val CARET = CbToken("CARET")
    @JvmField val COLON = CbToken("COLON")
    @JvmField val EQ = CbToken("EQ")
    @JvmField val EXCL = CbToken("EXCL")
    @JvmField val GREATER = CbToken("GREATER")
    @JvmField val LESS = CbToken("LESS")
    @JvmField val MINUS = CbToken("MINUS")
    @JvmField val PERCENT = CbToken("PERCENT")
    @JvmField val PERIOD = CbToken("PERIOD")
    @JvmField val PIPE = CbToken("PIPE")
    @JvmField val PLUS = CbToken("PLUS")
    @JvmField val QUESTION = CbToken("QUESTION")
    @JvmField val SLASH = CbToken("SLASH")
    @JvmField val STAR = CbToken("STAR")
    @JvmField val TILDE = CbToken("TILDE")
    @JvmField val COMMA = CbToken("COMMA")
    @JvmField val SEMI = CbToken("SEMI")
    @JvmField val OPEN_BRACKET = CbToken("OPEN_BRACKET")
    @JvmField val CLOSE_BRACKET = CbToken("CLOSE_BRACKET")
    @JvmField val OPEN_PAREN = CbToken("OPEN_PAREN")
    @JvmField val CLOSE_PAREN = CbToken("CLOSE_PAREN")
    @JvmField val OPEN_BRACE = CbToken("OPEN_BRACE")
    @JvmField val CLOSE_BRACE = CbToken("CLOSE_BRACE")

    @JvmField val IDENTIFIER = CbToken("IDENTIFIER")
    @JvmField val RAW_IDENTIFIER = CbToken("RAW_IDENTIFIER")

    @JvmField val ABSTRACT = CbToken("abstract")
    @JvmField val ADAPT = CbToken("adapt")
    @JvmField val ADDR = CbToken("addr")
    @JvmField val ALIAS = CbToken("alias")
    @JvmField val AND = CbToken("and")
    @JvmField val AS = CbToken("as")
    @JvmField val AUTO = CbToken("auto")
    @JvmField val BASE = CbToken("base")
    @JvmField val BREAK = CbToken("break")
    @JvmField val CORE = CbToken("Core")
    @JvmField val CASE = CbToken("case")
    @JvmField val CHOICE = CbToken("choice")
    @JvmField val CLASS = CbToken("class")
    @JvmField val CONSTRAINT = CbToken("constraint")
    @JvmField val CONTINUE = CbToken("continue")
    @JvmField val DEFAULT = CbToken("default")
    @JvmField val DESTROY = CbToken("destroy")
    @JvmField val ELSE = CbToken("else")
    @JvmField val EXPORT = CbToken("export")
    @JvmField val EXTEND = CbToken("extend")
    @JvmField val FINAL = CbToken("final")
    @JvmField val FN = CbToken("fn")
    @JvmField val FOR = CbToken("for")
    @JvmField val FORALL = CbToken("forall")
    @JvmField val FRIEND = CbToken("friend")
    @JvmField val IF = CbToken("if")
    @JvmField val IMPL = CbToken("impl")
    @JvmField val IMPLS = CbToken("impls")
    @JvmField val IMPORT = CbToken("import")
    @JvmField val IN = CbToken("in")
    @JvmField val INTERFACE = CbToken("interface")
    @JvmField val LET = CbToken("let")
    @JvmField val LIBRARY = CbToken("library")
    @JvmField val LIKE = CbToken("like")
    @JvmField val MATCH = CbToken("match")
    @JvmField val NAMESPACE = CbToken("namespace")
    @JvmField val NOT = CbToken("not")
    @JvmField val OBSERVE = CbToken("observe")
    @JvmField val OR = CbToken("or")
    @JvmField val OVERRIDE = CbToken("override")
    @JvmField val PACKAGE = CbToken("package")
    @JvmField val PARTIAL = CbToken("partial")
    @JvmField val PRIVATE = CbToken("private")
    @JvmField val PROTECTED = CbToken("protected")
    @JvmField val REQUIRE = CbToken("require")
    @JvmField val RETURN = CbToken("return")
    @JvmField val RETURNED = CbToken("returned")
    @JvmField val SELF = CbToken("self")
    @JvmField val SELF_TYPE = CbToken("Self")
    @JvmField val TEMPLATE = CbToken("template")
    @JvmField val THEN = CbToken("then")
    @JvmField val TYPE = CbToken("type")
    @JvmField val VAR = CbToken("var")
    @JvmField val VIRTUAL = CbToken("virtual")
    @JvmField val WHERE = CbToken("where")
    @JvmField val WHILE = CbToken("while")

    @JvmField val NUMERIC_TYPE_LITERAL = CbToken("numeric_type_literal")
    @JvmField val STRING = CbToken("STRING")
    @JvmField val RAW_STRING = CbToken("RAW_STRING")
    @JvmField val BLOCK_STRING = CbToken("BLOCK_STRING")
    @JvmField val RAW_BLOCK_STRING = CbToken("RAW_BLOCK_STRING")

    @JvmField
    val KEYWORDS = arrayOf<CbToken>(
      ABSTRACT, ADAPT, ADDR, ALIAS, AND, AS, AUTO, BASE, BREAK, CORE, CASE, CHOICE, CLASS, CONSTRAINT, CONTINUE, DEFAULT,
      DESTROY, ELSE, EXPORT, EXTEND, FINAL, FN, FOR, FORALL, FRIEND, IF, IMPL, IMPLS, IMPORT, IN, INTERFACE, LET, LIBRARY,
      LIKE, MATCH, NAMESPACE, NOT, OBSERVE, OR, OVERRIDE, PACKAGE, PARTIAL, PRIVATE, PROTECTED, REQUIRE, RETURN, RETURNED,
      SELF, SELF_TYPE, TEMPLATE, THEN, TYPE, VAR, VIRTUAL, WHERE, WHILE,
    )

    @JvmField
    val OPERATORS = arrayOf<CbToken>(
      GREATER_GREATER_EQ, LESS_LESS_EQ, AMP_EQ, CARET_EQ, COLON_EQ, COLON_EXCL, EQ_EQ, EQ_GREATER, EXCL_EQ, GREATER_EQ,
      GREATER_GREATER, LESS_EQ, LESS_GREATER, LESS_LESS, LESS_MINUS, MINUS_EQ, MINUS_GREATER, MINUS_MINUS, PERCENT_EQ,
      PIPE_EQ, PLUS_EQ, PLUS_PLUS, SLASH_EQ, STAR_EQ, TILDE_EQ, AMP, CARET, COLON, EQ, EXCL, GREATER, LESS, MINUS,
      PERCENT, PIPE, PLUS, QUESTION, SLASH, STAR, TILDE
    )
  }
}